import puppeteer from 'puppeteer-extra';
import StealthPlugin from 'puppeteer-extra-plugin-stealth';
import * as cheerio from 'cheerio';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const url = process.argv[2] || 'https://www.iaai.com/';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const cookiesPath = path.resolve(__dirname, 'www.iaai.com_01-08-2025.json');
if (!url) {
    console.log('No URL passed');
    process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
const randomDelay = (min = 1000, max = 3000) => {
    return new Promise(resolve => setTimeout(resolve, Math.random() * (max - min) + min));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
const simulateHumanBehavior = async (page) => {
    try {
        // –°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
        await page.mouse.move(
            Math.random() * 1366,
            Math.random() * 768
        );

        // –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        await page.evaluate(() => {
            window.scrollBy(0, Math.random() * 500);
        });

        await randomDelay(500, 1500);
    } catch (err) {
        console.log('Warning: Could not simulate human behavior:', err.message);
    }
};

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—Ç—ã Incapsula
const checkForIncapsula = (html) => {
    const incapsulaIndicators = [
        'Incapsula',
        'incident_id',
        '_Incapsula_Resource',
        'Request unsuccessful',
        'SWUDNSAI'
    ];

    return incapsulaIndicators.some(indicator => html.includes(indicator));
};

(async () => {
    let browser;
    try {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Stealth –ø–ª–∞–≥–∏–Ω–∞
        puppeteer.use(StealthPlugin());

        browser = await puppeteer.launch({
            headless: false, // –û—Å—Ç–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º—ã–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--no-first-run',
                '--no-zygote',
                '--disable-gpu',
                '--disable-web-security',
                '--disable-features=VizDisplayCompositor',
                '--disable-features=BlockThirdPartyCookies',
                '--enable-features=NetworkService,NetworkServiceInProcess',
                '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            ],
            defaultViewport: { width: 1366, height: 768 },
        });

        const page = await browser.newPage();

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        await page.setExtraHTTPHeaders({
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Cache-Control': 'max-age=0',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none',
            'Sec-Fetch-User': '?1',
            'Upgrade-Insecure-Requests': '1'
        });

        // –°–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        await page.evaluateOnNewDocument(() => {
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
            });

            // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º permissions
            const originalQuery = window.navigator.permissions.query;
            window.navigator.permissions.query = (parameters) => (
                parameters.name === 'notifications' ?
                    Promise.resolve({ state: Notification.permission }) :
                    originalQuery(parameters)
            );
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É–∫–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if (fs.existsSync(cookiesPath) ) {
            try {
                const fileContent = fs.readFileSync(cookiesPath, 'utf8');
                const parsed = JSON.parse(fileContent);

                if (parsed.cookies && Array.isArray(parsed.cookies)) {
                    await page.setCookie(...parsed.cookies);

                } else {
                    console.log('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∫—É–∫–æ–≤');
                }
            } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫—É–∫–æ–≤:', err.message);
            }
        } else {
            console.log('‚ö†Ô∏è –§–∞–π–ª –∫—É–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∏—Ö');
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        await page.goto(url, {
            waitUntil: 'domcontentloaded',
            timeout: 90000
        });


        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—â–∏—Ç—É
        let html = await page.content();
        let attempts = 0;
        const maxAttempts = 10;

        while (checkForIncapsula(html) && attempts < maxAttempts) {
            attempts++;

            // –≠–º—É–ª–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            await simulateHumanBehavior(page);

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            const waitTime = 5000 + (attempts * 2000);
            await randomDelay(waitTime, waitTime + 2000);

            // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
            if (attempts > 3) {
                await page.reload({ waitUntil: 'domcontentloaded' });
                await randomDelay(3000, 5000);
            }

            // –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å JavaScript –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å
            try {
                await page.evaluate(() => {
                    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const event = new Event('click', { bubbles: true });
                    document.dispatchEvent(event);

                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    window.scrollTo(0, document.body.scrollHeight * Math.random());
                });
                await randomDelay(1000, 2000);
            } catch (e) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å JavaScript –¥–µ–π—Å—Ç–≤–∏—è');
            }

            html = await page.content();
        }

        if (checkForIncapsula(html)) {
            throw new Error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–π—Ç–∏ –∑–∞—â–∏—Ç—É Incapsula –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
        }


        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        await randomDelay(3000, 5000);

        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        try {
            await page.waitForLoadState?.('networkidle') ||
                await page.waitForFunction(() => document.readyState === 'complete');
        } catch (e) {
            console.log('‚ö†Ô∏è Timeout –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML
        html = await page.content();

        const $ = cheerio.load(html);

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        $('link[href^="/"], script[src^="/"], img[src^="/"], a[href^="/"]').each((_, el) => {
            const tag = el.tagName;
            const attr = tag === 'link' || tag === 'a' ? 'href' : 'src';
            const oldPath = $(el).attr(attr);
            if (oldPath && !oldPath.startsWith('http')) {
                $(el).attr(attr, `https://www.iaai.com${oldPath}`);
            }
        });

        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∏ —Ç—Ä–µ–∫–µ—Ä—ã
        $(
            'script[src*="bing.com"], ' +
            'script[src*="criteo"], ' +
            'script[src*="sundaysky"], ' +
            'script[src*="kampyle"], ' +
            'script[src*="incapsula"], ' +
            'script[src*="analytics"], ' +
            'script[src*="gtag"], ' +
            'script[src*="facebook"], ' +
            'script[src*="google-analytics"]'
        ).remove();

        // –£–¥–∞–ª—è–µ–º iframe –∑–∞—â–∏—Ç—ã –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å
        $('iframe[src*="Incapsula"], iframe[id*="main-iframe"]').remove();

        const cleanedHtml = $.html();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π
        // try {
        //     const cookies = await page.cookies();
        //     const cookieData = {
        //         timestamp: new Date().toISOString(),
        //         url: url,
        //         cookies: cookies
        //     };
        //     fs.writeFileSync(cookiesPath, JSON.stringify(cookieData, null, 2));
        // } catch (err) {
        //     console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É–∫–∏:', err.message);
        // }

        await browser.close();
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ JSON
        console.log(JSON.stringify({
            html: cleanedHtml,
        }));
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:', error.message);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
        console.log(JSON.stringify({
            success: false,
            error: error.message,
            timestamp: new Date().toISOString()
        }));

    }
})();