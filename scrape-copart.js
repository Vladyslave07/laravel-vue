import { chromium } from 'playwright';
import * as cheerio from 'cheerio';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

const url = process.argv[2] || 'https://www.copart.com/';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const maxAttempts = 10;
const logPath = path.resolve(__dirname, 'storage/logs/scraper.log');
const log = (msg) => {
  const timestamp = new Date().toISOString();
  const fullMsg = `[${timestamp}] ${msg}`;
  console.log(fullMsg);
  fs.appendFileSync(logPath, fullMsg + '\n');
};
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
const randomDelay = (min = 1000, max = 3000) =>
  new Promise(resolve => setTimeout(resolve, Math.random() * (max - min) + min));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∑–∞—â–∏—Ç—ã Incapsula
const checkForIncapsula = (html) => {
  const indicators = [
    'Incapsula',
    'incident_id',
    '_Incapsula_Resource',
    'Request unsuccessful',
    'SWUDNSAI'
  ];
  return indicators.some(indicator => html.includes(indicator));
};

const simulateHumanBehavior = async (page) => {
  try {
    await page.mouse.move(Math.random() * 1366, Math.random() * 768);
    await page.keyboard.press('PageDown');
    await randomDelay(500, 1500);
  } catch (err) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞:', err.message);
  }
};

(async () => {
  let browserContext;

  try {
    log('üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å persistent-–∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º...');
    browserContext = await chromium.launch({
      headless: false,
      viewport: { width: 1366, height: 768 },
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox'
      ]
    });

    const page = await browserContext.newPage();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    await page.setExtraHTTPHeaders({
      'Accept-Language': 'en-US,en;q=0.9'
    });

    let html;
    let attempts = 0;

    while (attempts < maxAttempts) {
      await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });
      await randomDelay(2000, 4000);
      await simulateHumanBehavior(page);

      html = await page.content();
      if (!checkForIncapsula(html)) break;

      attempts++;
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã #${attempts}`);
      await randomDelay(2000 + attempts * 1000, 4000 + attempts * 1500);
      await page.reload({ waitUntil: 'domcontentloaded' });
    }

    if (checkForIncapsula(html)) {
      throw new Error('‚ùå –ó–∞—â–∏—Ç–∞ Incapsula –Ω–µ –±—ã–ª–∞ –æ–±–æ–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
    }

    // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç
    await page.waitForLoadState('networkidle');
    html = await page.content();
    const $ = cheerio.load(html);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
    $('link[href^="/"], script[src^="/"], img[src^="/"], a[href^="/"]').each((_, el) => {
      const tag = el.tagName;
      const attr = tag === 'link' || tag === 'a' ? 'href' : 'src';
      const oldPath = $(el).attr(attr);
      if (oldPath && !oldPath.startsWith('http')) {
        $(el).attr(attr, `https://www.copart.com${oldPath}`);
      }
    });

    // –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä—ã –∏ –ª–∏—à–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—ã
    $('script[src*="analytics"], script[src*="gtag"], script[src*="facebook"], script[src*="incapsula"]').remove();
    $('iframe[src*="incapsula"], iframe[id*="main-iframe"]').remove();

    const cleanedHtml = $.html();

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    await browserContext.close();

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    console.log(JSON.stringify({
      html: cleanedHtml
    }));
    

  } catch (err) {
    console.error('üí• –û—à–∏–±–∫–∞:', err.message);
    console.log(JSON.stringify({
      success: false,
      error: err.message
    }));
  } 
})();
